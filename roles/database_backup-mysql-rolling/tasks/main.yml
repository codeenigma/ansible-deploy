---

- set_fact:
    _mysql_build_database_name: "{{ mysql_backup_db.database_prefix }}_{{ build_number }}"
- set_fact:
    _mysql_previous_build_database_name: "{{ mysql_backup_db.database_prefix }}_{{ previous_build_number }}"
- set_fact:
    _mysql_build_user_name: "{{ mysql_backup_db.user_prefix }}_{{ build_number }}"
- set_fact:
    _mysql_build_password: "{{ lookup('password', '/tmp/{{ _mysql_build_database_name }} chars=ascii_letters') }}"
  # Note: we don't use the mysql_db Ansible module on purpose.
  # If database already exists, we want to fail and not override it
  # with previous build.
- name: Create new database.
  command: mysql --defaults-extra-file=/etc/mysql/debian.cnf -e "CREATE DATABASE {{ _mysql_build_database_name }};"
  become: yes
# We append privileges instead of replacing,
# to allow this role to be looped over,
# for multisites or projects with multiple databases.
# @todo deal with host for user.
- name: Create/update mysql user.
  command: mysql --defaults-extra-file=/etc/mysql/debian.cnf -e "GRANT ALL ON {{ _mysql_build_database_name }}.* TO '{{ _mysql_build_user_name}}'@'%' IDENTIFIED BY '{{ _mysql_build_password }}';"
  become: yes

- name: Populate new database.
  shell: "mysqldump --defaults-extra-file=/etc/mysql/debian.cnf {{ _mysql_previous_build_database_name }} | mysql --defaults-extra-file=/etc/mysql/debian.cnf {{ _mysql_build_database_name }}"
  when: previous_build_number > 0
  become: yes

- set_fact:
    _build_database:
      name: "{{ _mysql_build_database_name }}"
      user: "{{ _mysql_build_user_name }}"
      password: "{{ _mysql_build_password }}"
      host: "{{ mysql_build_host }}"

- set_fact:
    build_databases: "{{ build_databases + [ _build_database ] }}"